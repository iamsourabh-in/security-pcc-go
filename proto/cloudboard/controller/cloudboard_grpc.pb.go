// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/cloudboard/controller/cloudboard.proto

package controller

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CloudBoard_FetchAttestation_FullMethodName = "/cloudboard.controller.CloudBoard/FetchAttestation"
	CloudBoard_InvokeWorkload_FullMethodName   = "/cloudboard.controller.CloudBoard/InvokeWorkload"
	CloudBoard_WatchLoadLevel_FullMethodName   = "/cloudboard.controller.CloudBoard/WatchLoadLevel"
)

// CloudBoardClient is the client API for CloudBoard service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// CloudBoard orchestrates attestation, configuration, and workloads.
type CloudBoardClient interface {
	// FetchAttestation retrieves a fresh attestation bundle.
	FetchAttestation(ctx context.Context, in *FetchAttestationRequest, opts ...grpc.CallOption) (*FetchAttestationResponse, error)
	// InvokeWorkload streams workload requests to the node and returns workload responses.
	InvokeWorkload(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[InvokeWorkloadRequest, InvokeWorkloadResponse], error)
	// Load retrieves the current load on the node.
	WatchLoadLevel(ctx context.Context, in *LoadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LoadResponse], error)
}

type cloudBoardClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudBoardClient(cc grpc.ClientConnInterface) CloudBoardClient {
	return &cloudBoardClient{cc}
}

func (c *cloudBoardClient) FetchAttestation(ctx context.Context, in *FetchAttestationRequest, opts ...grpc.CallOption) (*FetchAttestationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchAttestationResponse)
	err := c.cc.Invoke(ctx, CloudBoard_FetchAttestation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudBoardClient) InvokeWorkload(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[InvokeWorkloadRequest, InvokeWorkloadResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CloudBoard_ServiceDesc.Streams[0], CloudBoard_InvokeWorkload_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[InvokeWorkloadRequest, InvokeWorkloadResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CloudBoard_InvokeWorkloadClient = grpc.BidiStreamingClient[InvokeWorkloadRequest, InvokeWorkloadResponse]

func (c *cloudBoardClient) WatchLoadLevel(ctx context.Context, in *LoadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LoadResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CloudBoard_ServiceDesc.Streams[1], CloudBoard_WatchLoadLevel_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LoadRequest, LoadResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CloudBoard_WatchLoadLevelClient = grpc.ServerStreamingClient[LoadResponse]

// CloudBoardServer is the server API for CloudBoard service.
// All implementations must embed UnimplementedCloudBoardServer
// for forward compatibility.
//
// CloudBoard orchestrates attestation, configuration, and workloads.
type CloudBoardServer interface {
	// FetchAttestation retrieves a fresh attestation bundle.
	FetchAttestation(context.Context, *FetchAttestationRequest) (*FetchAttestationResponse, error)
	// InvokeWorkload streams workload requests to the node and returns workload responses.
	InvokeWorkload(grpc.BidiStreamingServer[InvokeWorkloadRequest, InvokeWorkloadResponse]) error
	// Load retrieves the current load on the node.
	WatchLoadLevel(*LoadRequest, grpc.ServerStreamingServer[LoadResponse]) error
	mustEmbedUnimplementedCloudBoardServer()
}

// UnimplementedCloudBoardServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCloudBoardServer struct{}

func (UnimplementedCloudBoardServer) FetchAttestation(context.Context, *FetchAttestationRequest) (*FetchAttestationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAttestation not implemented")
}
func (UnimplementedCloudBoardServer) InvokeWorkload(grpc.BidiStreamingServer[InvokeWorkloadRequest, InvokeWorkloadResponse]) error {
	return status.Errorf(codes.Unimplemented, "method InvokeWorkload not implemented")
}
func (UnimplementedCloudBoardServer) WatchLoadLevel(*LoadRequest, grpc.ServerStreamingServer[LoadResponse]) error {
	return status.Errorf(codes.Unimplemented, "method WatchLoadLevel not implemented")
}
func (UnimplementedCloudBoardServer) mustEmbedUnimplementedCloudBoardServer() {}
func (UnimplementedCloudBoardServer) testEmbeddedByValue()                    {}

// UnsafeCloudBoardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudBoardServer will
// result in compilation errors.
type UnsafeCloudBoardServer interface {
	mustEmbedUnimplementedCloudBoardServer()
}

func RegisterCloudBoardServer(s grpc.ServiceRegistrar, srv CloudBoardServer) {
	// If the following call pancis, it indicates UnimplementedCloudBoardServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CloudBoard_ServiceDesc, srv)
}

func _CloudBoard_FetchAttestation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchAttestationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudBoardServer).FetchAttestation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudBoard_FetchAttestation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudBoardServer).FetchAttestation(ctx, req.(*FetchAttestationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudBoard_InvokeWorkload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CloudBoardServer).InvokeWorkload(&grpc.GenericServerStream[InvokeWorkloadRequest, InvokeWorkloadResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CloudBoard_InvokeWorkloadServer = grpc.BidiStreamingServer[InvokeWorkloadRequest, InvokeWorkloadResponse]

func _CloudBoard_WatchLoadLevel_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LoadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudBoardServer).WatchLoadLevel(m, &grpc.GenericServerStream[LoadRequest, LoadResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CloudBoard_WatchLoadLevelServer = grpc.ServerStreamingServer[LoadResponse]

// CloudBoard_ServiceDesc is the grpc.ServiceDesc for CloudBoard service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudBoard_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudboard.controller.CloudBoard",
	HandlerType: (*CloudBoardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchAttestation",
			Handler:    _CloudBoard_FetchAttestation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InvokeWorkload",
			Handler:       _CloudBoard_InvokeWorkload_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "WatchLoadLevel",
			Handler:       _CloudBoard_WatchLoadLevel_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/cloudboard/controller/cloudboard.proto",
}
