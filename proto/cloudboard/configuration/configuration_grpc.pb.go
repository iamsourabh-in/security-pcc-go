// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/cloudboard/configuration/configuration.proto

package configuration

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Configuration_Register_FullMethodName                         = "/cloudboard.configuration.Configuration/Register"
	Configuration_SuccessfullyAppliedConfiguration_FullMethodName = "/cloudboard.configuration.Configuration/SuccessfullyAppliedConfiguration"
	Configuration_FailedToApplyConfiguration_FullMethodName       = "/cloudboard.configuration.Configuration/FailedToApplyConfiguration"
	Configuration_CurrentConfigurationVersionInfo_FullMethodName  = "/cloudboard.configuration.Configuration/CurrentConfigurationVersionInfo"
)

// ConfigurationClient is the client API for Configuration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Configuration service manages node configuration registration and updates.
type ConfigurationClient interface {
	// Register a client for configuration updates.
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*ConfigurationUpdate, error)
	// Acknowledge successful application of a configuration.
	SuccessfullyAppliedConfiguration(ctx context.Context, in *ApplySuccessRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Acknowledge failure to apply a configuration.
	FailedToApplyConfiguration(ctx context.Context, in *ApplyFailureRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Retrieve current configuration version info.
	CurrentConfigurationVersionInfo(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*VersionInfoResponse, error)
}

type configurationClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigurationClient(cc grpc.ClientConnInterface) ConfigurationClient {
	return &configurationClient{cc}
}

func (c *configurationClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*ConfigurationUpdate, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigurationUpdate)
	err := c.cc.Invoke(ctx, Configuration_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationClient) SuccessfullyAppliedConfiguration(ctx context.Context, in *ApplySuccessRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, Configuration_SuccessfullyAppliedConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationClient) FailedToApplyConfiguration(ctx context.Context, in *ApplyFailureRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, Configuration_FailedToApplyConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationClient) CurrentConfigurationVersionInfo(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*VersionInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VersionInfoResponse)
	err := c.cc.Invoke(ctx, Configuration_CurrentConfigurationVersionInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigurationServer is the server API for Configuration service.
// All implementations must embed UnimplementedConfigurationServer
// for forward compatibility.
//
// Configuration service manages node configuration registration and updates.
type ConfigurationServer interface {
	// Register a client for configuration updates.
	Register(context.Context, *RegisterRequest) (*ConfigurationUpdate, error)
	// Acknowledge successful application of a configuration.
	SuccessfullyAppliedConfiguration(context.Context, *ApplySuccessRequest) (*EmptyResponse, error)
	// Acknowledge failure to apply a configuration.
	FailedToApplyConfiguration(context.Context, *ApplyFailureRequest) (*EmptyResponse, error)
	// Retrieve current configuration version info.
	CurrentConfigurationVersionInfo(context.Context, *EmptyRequest) (*VersionInfoResponse, error)
	mustEmbedUnimplementedConfigurationServer()
}

// UnimplementedConfigurationServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConfigurationServer struct{}

func (UnimplementedConfigurationServer) Register(context.Context, *RegisterRequest) (*ConfigurationUpdate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedConfigurationServer) SuccessfullyAppliedConfiguration(context.Context, *ApplySuccessRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuccessfullyAppliedConfiguration not implemented")
}
func (UnimplementedConfigurationServer) FailedToApplyConfiguration(context.Context, *ApplyFailureRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FailedToApplyConfiguration not implemented")
}
func (UnimplementedConfigurationServer) CurrentConfigurationVersionInfo(context.Context, *EmptyRequest) (*VersionInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentConfigurationVersionInfo not implemented")
}
func (UnimplementedConfigurationServer) mustEmbedUnimplementedConfigurationServer() {}
func (UnimplementedConfigurationServer) testEmbeddedByValue()                       {}

// UnsafeConfigurationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigurationServer will
// result in compilation errors.
type UnsafeConfigurationServer interface {
	mustEmbedUnimplementedConfigurationServer()
}

func RegisterConfigurationServer(s grpc.ServiceRegistrar, srv ConfigurationServer) {
	// If the following call pancis, it indicates UnimplementedConfigurationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Configuration_ServiceDesc, srv)
}

func _Configuration_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Configuration_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Configuration_SuccessfullyAppliedConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplySuccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServer).SuccessfullyAppliedConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Configuration_SuccessfullyAppliedConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServer).SuccessfullyAppliedConfiguration(ctx, req.(*ApplySuccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Configuration_FailedToApplyConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyFailureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServer).FailedToApplyConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Configuration_FailedToApplyConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServer).FailedToApplyConfiguration(ctx, req.(*ApplyFailureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Configuration_CurrentConfigurationVersionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServer).CurrentConfigurationVersionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Configuration_CurrentConfigurationVersionInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServer).CurrentConfigurationVersionInfo(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Configuration_ServiceDesc is the grpc.ServiceDesc for Configuration service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Configuration_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudboard.configuration.Configuration",
	HandlerType: (*ConfigurationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Configuration_Register_Handler,
		},
		{
			MethodName: "SuccessfullyAppliedConfiguration",
			Handler:    _Configuration_SuccessfullyAppliedConfiguration_Handler,
		},
		{
			MethodName: "FailedToApplyConfiguration",
			Handler:    _Configuration_FailedToApplyConfiguration_Handler,
		},
		{
			MethodName: "CurrentConfigurationVersionInfo",
			Handler:    _Configuration_CurrentConfigurationVersionInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cloudboard/configuration/configuration.proto",
}
