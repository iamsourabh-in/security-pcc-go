// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/cloudboard/jobhelper/jobhelper.proto

package jobhelper

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	JobHelper_InvokeWorkload_FullMethodName = "/cloudboard.jobhelper.JobHelper/InvokeWorkload"
	JobHelper_Teardown_FullMethodName       = "/cloudboard.jobhelper.JobHelper/Teardown"
)

// JobHelperClient is the client API for JobHelper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// JobHelper service invokes and manages workloads.
type JobHelperClient interface {
	// Bi-directional streaming for workload requests and responses.
	InvokeWorkload(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[WorkloadRequest, WorkloadResponse], error)
	// Teardown cleans up any running workload.
	Teardown(ctx context.Context, in *TeardownRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type jobHelperClient struct {
	cc grpc.ClientConnInterface
}

func NewJobHelperClient(cc grpc.ClientConnInterface) JobHelperClient {
	return &jobHelperClient{cc}
}

func (c *jobHelperClient) InvokeWorkload(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[WorkloadRequest, WorkloadResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &JobHelper_ServiceDesc.Streams[0], JobHelper_InvokeWorkload_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WorkloadRequest, WorkloadResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type JobHelper_InvokeWorkloadClient = grpc.BidiStreamingClient[WorkloadRequest, WorkloadResponse]

func (c *jobHelperClient) Teardown(ctx context.Context, in *TeardownRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, JobHelper_Teardown_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobHelperServer is the server API for JobHelper service.
// All implementations must embed UnimplementedJobHelperServer
// for forward compatibility.
//
// JobHelper service invokes and manages workloads.
type JobHelperServer interface {
	// Bi-directional streaming for workload requests and responses.
	InvokeWorkload(grpc.BidiStreamingServer[WorkloadRequest, WorkloadResponse]) error
	// Teardown cleans up any running workload.
	Teardown(context.Context, *TeardownRequest) (*EmptyResponse, error)
	mustEmbedUnimplementedJobHelperServer()
}

// UnimplementedJobHelperServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedJobHelperServer struct{}

func (UnimplementedJobHelperServer) InvokeWorkload(grpc.BidiStreamingServer[WorkloadRequest, WorkloadResponse]) error {
	return status.Errorf(codes.Unimplemented, "method InvokeWorkload not implemented")
}
func (UnimplementedJobHelperServer) Teardown(context.Context, *TeardownRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Teardown not implemented")
}
func (UnimplementedJobHelperServer) mustEmbedUnimplementedJobHelperServer() {}
func (UnimplementedJobHelperServer) testEmbeddedByValue()                   {}

// UnsafeJobHelperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobHelperServer will
// result in compilation errors.
type UnsafeJobHelperServer interface {
	mustEmbedUnimplementedJobHelperServer()
}

func RegisterJobHelperServer(s grpc.ServiceRegistrar, srv JobHelperServer) {
	// If the following call pancis, it indicates UnimplementedJobHelperServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&JobHelper_ServiceDesc, srv)
}

func _JobHelper_InvokeWorkload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JobHelperServer).InvokeWorkload(&grpc.GenericServerStream[WorkloadRequest, WorkloadResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type JobHelper_InvokeWorkloadServer = grpc.BidiStreamingServer[WorkloadRequest, WorkloadResponse]

func _JobHelper_Teardown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeardownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobHelperServer).Teardown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobHelper_Teardown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobHelperServer).Teardown(ctx, req.(*TeardownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JobHelper_ServiceDesc is the grpc.ServiceDesc for JobHelper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobHelper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudboard.jobhelper.JobHelper",
	HandlerType: (*JobHelperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Teardown",
			Handler:    _JobHelper_Teardown_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InvokeWorkload",
			Handler:       _JobHelper_InvokeWorkload_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/cloudboard/jobhelper/jobhelper.proto",
}
